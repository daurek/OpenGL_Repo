#version 330 core
		
struct Light
{
	vec4 position;
	vec3 color;
};

uniform mat4 model_view_matrix;
uniform mat4 projection_matrix;
uniform mat4	 normal_matrix;
uniform Light light;
uniform float ambient_intensity;
uniform float diffuse_intensity;
        
layout (location = 0) in vec3 vertex_coordinates;
layout (location = 1) in vec3 vertex_color;
layout (location = 2) in vec3 vertex_normal;
        


out vec3 front_color;

void main()
{
	vec4  position = model_view_matrix * vec4(vertex_coordinates, 1.0);
	vec4  normal   = normal_matrix * vec4(vertex_normal, 1.0);

	vec4  light_direction = light.position - position;
	float light_intensity = diffuse_intensity * max (dot (normalize (normal.xyz), normalize (light_direction.xyz)), 0.0);

	front_color = diffuse_intensity * light_intensity * light.color;
	gl_Position = projection_matrix * position;
};