#version 330 core

uniform sampler2D	sampler2d;
uniform float		blurStrength = 3.0;
uniform bool		blur;

in  vec2 texture_uv;
out vec4 fragment_color;

const float offset = 1.0 / 600.0;  

float blurKernel[9] = float[]
(
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
);

vec2 offsets[9] = vec2[]
(
        vec2(-offset,  offset), // top-left
        vec2( 0.0f,    offset), // top-center
        vec2( offset,  offset), // top-right
        vec2(-offset,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( offset,  0.0f),   // center-right
        vec2(-offset, -offset), // bottom-left
        vec2( 0.0f,   -offset), // bottom-center
        vec2( offset, -offset)  // bottom-right    
);

void main()
{
	// Only apply blur if active
	if(blur)
	{
		// Use the kernel to apply it to the sample texture
		vec3 sampleTex[9];
		for(int i = 0; i < 9; i++)
			sampleTex[i] = vec3(texture(sampler2d, texture_uv + offsets[i] * blurStrength));
		
		// Use new vec3 cache to calculate final result with the blur kernel
		vec3 col = vec3(0.0);
		for(int i = 0; i < 9; i++)
			col += sampleTex[i] * blurKernel[i];
		
		// Apply final result
		fragment_color =  vec4(col, 1.0);
	}
	else
	{
		fragment_color =  texture(sampler2d, texture_uv);

	}

};