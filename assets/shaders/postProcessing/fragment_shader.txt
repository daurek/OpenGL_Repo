#version 330 core
  
in vec2 texCoord;
in vec3 front_color;

out vec4 fragment_color;
uniform sampler2D diffuse;

void main()
{             
	float numBlurPixelsPerSide = float(10 / 2); 
	float sigma = 4;
	vec2 blurMultiplyVec = 0 < 0.3 ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
 
	vec3 incrementalGaussian;
	incrementalGaussian.x = 1.0 / (sqrt(2.0 * 3.14) * sigma);
	incrementalGaussian.y = exp(-0.5 / (sigma * sigma));
	incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;
 
	vec4 avgValue = vec4(0.0, 0.0, 0.0, 0.0);
	float coefficientSum = 0.0;
 
	avgValue += texture(diffuse, texCoord) * incrementalGaussian.x;
	coefficientSum += incrementalGaussian.x;
	incrementalGaussian.xy *= incrementalGaussian.yz;
 
	for (float i = 1.0; i <= numBlurPixelsPerSide; i++) 
	{ 
		avgValue += texture(diffuse, texCoord - i * blurMultiplyVec) * incrementalGaussian.x;         
		avgValue += texture(diffuse, texCoord + i * blurMultiplyVec) * incrementalGaussian.x;         
		coefficientSum += 2.0 * incrementalGaussian.x;
		incrementalGaussian.xy *= incrementalGaussian.yz;
	}
	
	fragment_color = avgValue / coefficientSum;
}  